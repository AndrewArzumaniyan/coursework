    1|       |/* RED-BLACK program */
    2|       |
    3|       |#include <math.h>
    4|       |#include <stdlib.h>
    5|       |#include <stdio.h>
    6|       |
    7|   499M|#define Max(a, b) ((a) > (b) ? (a) : (b))
    8|       |
    9|  2.09G|#define N 10000
   10|     11|#define ITMAX 10
   11|       |
   12|       |int main(int an, char ** as)
   13|      1|{
   14|      1|    int i, j, it;
   15|      1|    float MAXEPS = 0.5E-5f;
   16|      1|    float w = 0.5f;
   17|       |
   18|      1|    #pragma dvm array distribute[block][block]
   19|      1|    float (*A)[N];
   20|       |
   21|       |    /* Create array */
   22|      1|    A = malloc(N * N * sizeof(float));
   23|       |
   24|      1|    #pragma dvm region
   25|      1|    {
   26|       |    /* Initialization parallel loop */
   27|      1|    #pragma dvm parallel([i][j] on A[i][j]) cuda_block(256)
   28|  10.0k|    for (i = 0; i < N; i++)
   29|   100M|        for (j = 0; j < N; j++)
   30|   100M|            if (i == j)
   31|  10.0k|                A[i][j] = N + 2;
   32|  99.9M|            else
   33|  99.9M|                A[i][j] = -1.0f;
   34|      1|    }
   35|       |
   36|       |    /* iteration loop */
   37|     11|    for (it = 1; it <= ITMAX; it++)
   38|     10|    {
   39|     10|        float eps = 0.f;
   40|     10|        #pragma dvm actual(eps)
   41|       |
   42|     10|        #pragma dvm region
   43|     10|        {
   44|       |        /* Parallel loop with reduction on RED points */
   45|     10|        #pragma dvm parallel([i][j] on A[i][j]) shadow_renew(A), reduction(max(eps)), cuda_block(256)
   46|  99.9k|        for (i = 1; i < N - 1; i++)
   47|   999M|            for (j = 1; j < N - 1; j++)
   48|   999M|                if ((i + j) % 2 == 1)
   49|   499M|                {
   50|   499M|                    float s;
   51|   499M|                    s = A[i][j];
   52|   499M|                    A[i][j] = (w / 4) * (A[i - 1][j] + A[i + 1][j] + A[i][j - 1] + A[i][j + 1]) + (1 - w) * A[i][j];
   53|   499M|                    eps = Max(fabs(s - A[i][j]), eps);
   54|   499M|                }
   55|       |
   56|       |        /* Parallel loop on BLACK points (without reduction) */
   57|     10|        #pragma dvm parallel([i][j] on A[i][j]) shadow_renew(A), cuda_block(256)
   58|  99.9k|        for (i = 1; i < N - 1; i++)
   59|   999M|            for (j = 1; j < N - 1; j++)
   60|   999M|                if ((i + j) % 2 == 0)
   61|   499M|                {
   62|   499M|                    A[i][j] = (w / 4) * (A[i - 1][j] + A[i + 1][j] + A[i][j - 1] + A[i][j + 1]) + (1 - w) * A[i][j];
   63|   499M|                }
   64|     10|        }
   65|       |
   66|     10|        #pragma dvm get_actual(eps)
   67|     10|        printf("it=%4i   eps=%e\n", it, eps);
   68|     10|        if (eps < MAXEPS)
   69|      0|            break;
   70|     10|    }
   71|       |
   72|      1|    free(A);
   73|      1|    return 0;
   74|      1|}

